/* Test if our parse tree will typecheck and convert ints to floats */

/*
[[+ 2.5 [+ 2 4]]]

[[+ 3 5.0]]

[[:= x 5]]
[[:= x 5.9]]

[[not 3.0]]
[[+ 2.5 3]]
[[+ 3 2.5]]
*/

/*
[3.2]
[[+ 3.0 3]]
[[+ 3 3.0]]
[[+ 3 [+ 3.0 3.0]]]
[[:= x [+ 2 3.0]]]
[[:= x [:= y [:= z [+ 5.2 4]]]]]
[[+ 5.0 [-3 2]]]

[[+ [* 3 5] 7]]

[[/ 3 5]]
[[/ 4.0 3.0]]
*/
/*
[[+ "Hello " "World"]]
[[or false false]]
[[or true false]]
[[or true true]]
[[and true true]]
[[and true false]]
[[and false false]]
[[not false]]
[[not true]]
*/
/* Test cases for our parser
 * @todo: write test cases for assignment operators
 * @todo: Have "bye" output in gforth code after each statement
 * @todo: Make this work: [+10.1.1]
 */

/* Statements and expressions */
/*
[[* 10 5]]
[2.45e-1 3.56]
*/

/* Binops */
/*
[[+ [+ 1 2] 2]]
[1 2]
[y 2]
[y [2]]
[[let [[y float]]] [:= y 3.0]]
[[let [[y int]]] [:= y 3]]
[[+ 3 5]]
[[+ 4.0 3.0]]
[[- 3 5]]
[[- 4.0 3.0]]
[[* 3 5]]
[[* 4.0 3.0]]
[[^ 3 5]]
[[^ 4.0 3.0]]
[[!= 3 5]]
[[!= 4.0 3.0]]
[[>= 3 5]]
[[>= 4.0 3.0]]
[[<= 3 5]]
[[<= 4.0 3.0]]
[[< 3 5]]
[[< 4.0 3.0]]
[[> 3 5]]
[[> 4.0 3.0]]
[[= 3 5]]
[[= 4.0 3.0]]
[[% 3 5]]
[[% 4.0 3.0]]
[[^ 3 5]]
[[^ 4.0 3.0]]
[[or 1 1]]
[[or 1.0 1.0]]
[[and 1 1]]
[[and 1.0 1.0]]
*/

/* Unops */
/*
[[tan 45]]
[[tan 45.0]]
[[cos 45]]
[[cos 45.0]]
[[sin 45]]
[[sin 45.0]]
[[- 5]]
[[- 5.0]]
[[not 0]]
*/
/* Statements */

/*Everything to here parses */

fd l#$22[[stdout [+ "ello" "poppy"]]]

/* Paul's test */

[[if[<= 1200e-6 1][stdout [sin 3.14]] [stdout [or true false]]]]


[[if [> 2 3] [stdout "yes"] [stdout "no"]]]



[[let [[x int]]] [:= x 10] [stdout [- 20 x]]]


[[let [[x int]]] [:= x 10] [while [> x 5] [stdout "hello"] [stdout "x"] [stdout x] [:= x [- x 1]]]]


/*
[[if [= 1 1] [let [[y int]]] [:= y 3]] [:= x 2]]
[[while [= 5 x] [:= x [- x 1]]]]
*/

/* This should work syntactically. Binop and 2 floats with no spaces */
/* [+10.1.1] */